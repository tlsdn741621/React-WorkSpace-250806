함수형 컴포넌트에서,  hooks , 개념 및 기본기.
- hook : 고리, 특정 시점에서 끼어 들어서 동작을 수행함.
일반적인 실행 흐름 : a -> b-> c -> d -> e
Hook 사용시 : a -> b -> hook 실행 -> c -> d -> e
=====================================================================
1
useState
: React의 함수형 컴포넌트에서 상태(state)를 관리하기 위해 사용하는 Hook
상태 ?
컴포넌트의 데이터로, 값이 변경되면 화면(UI)을 자동으로 다시 렌더링합니다.
주요 특징
상태 값 저장: 컴포넌트 내에서 값을 유지
값 변경 시 자동 렌더링: UI가 상태 변화에 맞게 자동 업데이트
함수형 컴포넌트 전용: 클래스형 컴포넌트의 this.state와 같은 역할
기본 문법
const [state, setState] = useState(initialValue);

state: 현재 상태 값
setState: 상태를 변경하는 함수
initialValue: 상태의 초기값
=====================================================================
2
useEffect
: 사이드 이펙트(Side Effect) 처리하기 위한 hook
사이드 이펙트(Side Effect) ?
컴포넌트의 렌더링 과정 외부에서 발생하는 작업
1) API 호출 ,
2) DOM 직접 조작, (포커서, 스크롤, 등)
3) 타이머 설정 / 해제
4) 이벤트 리스너 등록 / 해제
5) 콘솔 로그, 로컬 스토리지에 저장.

기본 문법
useEffect(콜백함수, [의존성배열]);
useEffect(() => {
  // 실행할 코드
  return () => {
    // 정리(clean-up) 코드 (선택)
  };
}, [의존성배열]);

첫 번째 인자: 실행할 함수
두 번째 인자([]): 의존성 배열 (언제 실행할지 결정)

[] 빈 배열 → 최초 1회 실행 (마운트 시)

[값] 특정 값 변경 시 실행

없으면 → 렌더링마다 실행
=====================================================================
3
useReducer
:  상태 관리 로직이 복잡할 때 사용하는 Hook
다양한 상태 변경 패턴을 한 곳에서 관리할 수 있도록 도와줌.
왜 사용하나요?
1)
상태 변경 로직이 if/else나 setState 중첩으로 복잡해질 때
2)
여러 개의 상태 값이 서로 연관되어 변경될 때
3) 상태 관리 라이브러리 사용할 때,
Redux와 유사한 방식으로 액션 기반 상태 관리를 하고 싶을 때

기본 문법
const [state, dispatch] = useReducer(reducer, initialState);

state: 현재 상태 값
dispatch: 상태 변경 요청 함수
reducer: (state, action) => newState 형태의 함수
initialState: 초기 상태 값













